# Author: Leandro FrÃ³es
# Date: 2024-04-30

# Tested hashes
# aee22a35cbdac3f16c3ed742c0b1bfe9739a13469cf43b36fb2c63565111028c (Mar 4)
# 3b63ea8b6f9b2aa847faa11f6cd3eb281abd9b9cceedb570713c4d78a47de567 (Mar 11)
# a1e74120c32162d18c0245a8390360e9b63a11887e396c270e0ed35296952598 (Apr 25)
# 53e65d071870f127bc6bf6c8e8ddfd131558153513976744ee7460eeb766d081 (Apr 29)
# 1625ac230aa5ca950573f3ba0b1a7bd4c7fbd3e3686f9ecd4a40f1504bf33a11 (Apr 30)

def decode_str(s) -> str:
	is_wide_str = s[1] == 0 # Silly, I know...

	result_str = ""

	if not is_wide_str:
		result_str = s.decode("utf8")
	else:
		result_str = s.decode("utf-16le")
		
	if result_str.isascii():
		return result_str
	
	return ""

def deobfuscate(data, key) -> str:
	result_str = bytearray()

	for b in data:
		key += 1
		result_str.append(b ^ (key & 0xFF))

	return decode_str(result_str)

# Set the deobfuscation function address
func_addr = 0x18000ae78
# Get all the XRefs for the target function
refs = bv.get_code_refs(func_addr)

results = []

for ref in refs:
	# Get the first parameter being passed to the target func, which is
	# the buffer containing the obfuscated data
	enc_data_addr = ref.mlil.params[0].constant
	# Read the first 6 bytes of the mentioned data buffer. These bytes
	# are used to determine both the XOR key to be used and the result
	# string length
	buffer = bv.read(enc_data_addr, 6)
	# Get the XOR key
	key = buffer[0]
	# Get the result string length. Although the malware performs a XOR 
	# operation between the first DWORD and the WORD next to it in the
	# data buffer the content used as the result string length is a
	# single byte so the code bellow works just fine :)
	result_str_len = buffer[0] ^ buffer[4]
	# Read the obfuscated data buffer, but now with the correct length
	data = bv.read(enc_data_addr, result_str_len + 6)
	# Skip the first 6 bytes of the data buffer since those are not part
	# of the result string
	data = data[6:6+result_str_len]
	# Deobfuscate the string and save the result in a list
	results.append(deobfuscate(data, key))

	for s in results:
		if s:
			print(s)

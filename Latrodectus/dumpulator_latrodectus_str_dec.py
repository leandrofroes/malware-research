# Author: Leandro Fr√≥es
# Date: 2024-04-30

# Tested hashes
# aee22a35cbdac3f16c3ed742c0b1bfe9739a13469cf43b36fb2c63565111028c (Mar 4)
# 3b63ea8b6f9b2aa847faa11f6cd3eb281abd9b9cceedb570713c4d78a47de567 (Mar 11)
# a1e74120c32162d18c0245a8390360e9b63a11887e396c270e0ed35296952598 (Apr 25)
# 53e65d071870f127bc6bf6c8e8ddfd131558153513976744ee7460eeb766d081 (Apr 29)
# 1625ac230aa5ca950573f3ba0b1a7bd4c7fbd3e3686f9ecd4a40f1504bf33a11 (Apr 30)

from dumpulator import Dumpulator

minidump_path = "latrodectus.dll"

dp = Dumpulator(minidump_path, quiet=True)

func_addr = 0x18000ae78

enc_data_addrs = []

for enc_data in enc_data_addrs:
    # Create some space for the local variable that receives the result
    # string (arg2)
    out_buffer = dp.allocate(1000)
    # Emulate the deobfuscation function by passing both the obfuscated
    # data buffer and the result buffer as parameters
    dp.call(func_addr, [enc_data, out_buffer])
    # Read the second parameter buffer containing the deobfuscated
    # string
    s = dp.read(out_buffer, 1000)
    print(s)